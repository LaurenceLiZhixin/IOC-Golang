//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli

package config

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	autowireconfig "github.com/alibaba/ioc-golang/extension/autowire/config"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &ConfigFloat64_{}
		},
	})
	autowireconfig.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return new(ConfigFloat64)
		},
		ParamFactory: func() interface{} {
			return new(ConfigFloat64)
		},
		ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
			param := p.(configFloat64Interface)
			impl := i.(*ConfigFloat64)
			return param.New(impl)
		},
	})
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &ConfigInt64_{}
		},
	})
	autowireconfig.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return new(ConfigInt64)
		},
		ParamFactory: func() interface{} {
			return new(ConfigInt64)
		},
		ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
			param := p.(configInt64Interface)
			impl := i.(*ConfigInt64)
			return param.New(impl)
		},
	})
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &ConfigInt_{}
		},
	})
	autowireconfig.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return new(ConfigInt)
		},
		ParamFactory: func() interface{} {
			return new(ConfigInt)
		},
		ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
			param := p.(configIntInterface)
			impl := i.(*ConfigInt)
			return param.New(impl)
		},
	})
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &ConfigMap_{}
		},
	})
	autowireconfig.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return new(ConfigMap)
		},
		ParamFactory: func() interface{} {
			return new(ConfigMap)
		},
		ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
			param := p.(configMapInterface)
			impl := i.(*ConfigMap)
			return param.New(impl)
		},
	})
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &ConfigSlice_{}
		},
	})
	autowireconfig.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return new(ConfigSlice)
		},
		ParamFactory: func() interface{} {
			return new(ConfigSlice)
		},
		ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
			param := p.(configSliceInterface)
			impl := i.(*ConfigSlice)
			return param.New(impl)
		},
	})
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &ConfigString_{}
		},
	})
	autowireconfig.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return new(ConfigString)
		},
		ParamFactory: func() interface{} {
			return new(ConfigString)
		},
		ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
			param := p.(configStringInterface)
			impl := i.(*ConfigString)
			return param.New(impl)
		},
	})
}

type configFloat64Interface interface {
	New(impl *ConfigFloat64) (*ConfigFloat64, error)
}
type configInt64Interface interface {
	New(impl *ConfigInt64) (*ConfigInt64, error)
}
type configIntInterface interface {
	New(impl *ConfigInt) (*ConfigInt, error)
}
type configMapInterface interface {
	New(impl *ConfigMap) (*ConfigMap, error)
}
type configSliceInterface interface {
	New(impl *ConfigSlice) (*ConfigSlice, error)
}
type configStringInterface interface {
	New(impl *ConfigString) (*ConfigString, error)
}
type ConfigFloat64_ struct {
	Value_ func() float64
	New_   func(impl *ConfigFloat64) (*ConfigFloat64, error)
}

func (c *ConfigFloat64_) Value() float64 {
	return c.Value_()
}
func (c *ConfigFloat64_) New(impl *ConfigFloat64) (*ConfigFloat64, error) {
	return c.New_(impl)
}

type ConfigInt64_ struct {
	Value_ func() int64
	New_   func(impl *ConfigInt64) (*ConfigInt64, error)
}

func (c *ConfigInt64_) Value() int64 {
	return c.Value_()
}
func (c *ConfigInt64_) New(impl *ConfigInt64) (*ConfigInt64, error) {
	return c.New_(impl)
}

type ConfigInt_ struct {
	Value_ func() int
	New_   func(impl *ConfigInt) (*ConfigInt, error)
}

func (c *ConfigInt_) Value() int {
	return c.Value_()
}
func (c *ConfigInt_) New(impl *ConfigInt) (*ConfigInt, error) {
	return c.New_(impl)
}

type ConfigMap_ struct {
	Value_ func() map[string]interface{}
	New_   func(impl *ConfigMap) (*ConfigMap, error)
}

func (c *ConfigMap_) Value() map[string]interface{} {
	return c.Value_()
}
func (c *ConfigMap_) New(impl *ConfigMap) (*ConfigMap, error) {
	return c.New_(impl)
}

type ConfigSlice_ struct {
	Value_ func() []interface{}
	New_   func(impl *ConfigSlice) (*ConfigSlice, error)
}

func (c *ConfigSlice_) Value() []interface{} {
	return c.Value_()
}
func (c *ConfigSlice_) New(impl *ConfigSlice) (*ConfigSlice, error) {
	return c.New_(impl)
}

type ConfigString_ struct {
	Value_ func() string
	New_   func(impl *ConfigString) (*ConfigString, error)
}

func (c *ConfigString_) Value() string {
	return c.Value_()
}
func (c *ConfigString_) New(impl *ConfigString) (*ConfigString, error) {
	return c.New_(impl)
}
