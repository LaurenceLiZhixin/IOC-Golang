//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package monitor

import (
	"github.com/alibaba/ioc-golang/aop"
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	aopmonitor "github.com/alibaba/ioc-golang/extension/aop/monitor/api/ioc_golang/aop/monitor"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &interceptorImpl_{}
		},
	})
	interceptorImplStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &interceptorImpl{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
		DisableProxy: true,
	}
	singleton.RegisterStructDescriptor(interceptorImplStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &monitorService_{}
		},
	})
	monitorServiceStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &monitorService{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
		DisableProxy: true,
	}
	singleton.RegisterStructDescriptor(monitorServiceStructDescriptor)
}

type interceptorImpl_ struct {
	BeforeInvoke_ func(ctx *aop.InvocationContext)
	AfterInvoke_  func(ctx *aop.InvocationContext)
	Monitor_      func(monitorCtx *context)
	StopMonitor_  func()
}

func (i *interceptorImpl_) BeforeInvoke(ctx *aop.InvocationContext) {
	i.BeforeInvoke_(ctx)
}

func (i *interceptorImpl_) AfterInvoke(ctx *aop.InvocationContext) {
	i.AfterInvoke_(ctx)
}

func (i *interceptorImpl_) Monitor(monitorCtx *context) {
	i.Monitor_(monitorCtx)
}

func (i *interceptorImpl_) StopMonitor() {
	i.StopMonitor_()
}

type monitorService_ struct {
	Monitor_ func(req *aopmonitor.MonitorRequest, svr aopmonitor.MonitorService_MonitorServer) error
}

func (m *monitorService_) Monitor(req *aopmonitor.MonitorRequest, svr aopmonitor.MonitorService_MonitorServer) error {
	return m.Monitor_(req, svr)
}

type interceptorImplIOCInterface interface {
	BeforeInvoke(ctx *aop.InvocationContext)
	AfterInvoke(ctx *aop.InvocationContext)
	Monitor(monitorCtx *context)
	StopMonitor()
}

type monitorServiceIOCInterface interface {
	Monitor(req *aopmonitor.MonitorRequest, svr aopmonitor.MonitorService_MonitorServer) error
}

var _interceptorImplSDID string

func GetinterceptorImplSingleton() (*interceptorImpl, error) {
	if _interceptorImplSDID == "" {
		_interceptorImplSDID = util.GetSDIDByStructPtr(new(interceptorImpl))
	}
	i, err := singleton.GetImpl(_interceptorImplSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*interceptorImpl)
	return impl, nil
}

func GetinterceptorImplIOCInterfaceSingleton() (interceptorImplIOCInterface, error) {
	if _interceptorImplSDID == "" {
		_interceptorImplSDID = util.GetSDIDByStructPtr(new(interceptorImpl))
	}
	i, err := singleton.GetImplWithProxy(_interceptorImplSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(interceptorImplIOCInterface)
	return impl, nil
}

var _monitorServiceSDID string

func GetmonitorServiceSingleton() (*monitorService, error) {
	if _monitorServiceSDID == "" {
		_monitorServiceSDID = util.GetSDIDByStructPtr(new(monitorService))
	}
	i, err := singleton.GetImpl(_monitorServiceSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*monitorService)
	return impl, nil
}

func GetmonitorServiceIOCInterfaceSingleton() (monitorServiceIOCInterface, error) {
	if _monitorServiceSDID == "" {
		_monitorServiceSDID = util.GetSDIDByStructPtr(new(monitorService))
	}
	i, err := singleton.GetImplWithProxy(_monitorServiceSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(monitorServiceIOCInterface)
	return impl, nil
}
