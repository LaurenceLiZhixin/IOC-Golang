//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package extension

import (
	"github.com/inconshreveable/log15"

	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	"github.com/alibaba/ioc-golang/extension/aop/trace/log"
	allimpls "github.com/alibaba/ioc-golang/extension/autowire/allimpls"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &logWriter_{}
		},
	})
	logWriterStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &logWriter{}
		},
		ConstructFunc: func(i interface{}, _ interface{}) (interface{}, error) {
			impl := i.(*logWriter)
			var constructFunc logWriterConstructFunc = newLogWriter
			return constructFunc(impl)
		},
		Metadata: map[string]interface{}{
			"aop": map[string]interface{}{},
			"autowire": map[string]interface{}{
				"allimpls": map[string]interface{}{
					"interfaces": []interface{}{
						new(log.TraceExtensionWriter),
					},
				},
			},
		},
		DisableProxy: true,
	}
	allimpls.RegisterStructDescriptor(logWriterStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &log15Handler_{}
		},
	})
	log15HandlerStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &log15Handler{}
		},
		ConstructFunc: func(i interface{}, _ interface{}) (interface{}, error) {
			impl := i.(*log15Handler)
			var constructFunc log15HandlerConstructFunc = newLog15Handler
			return constructFunc(impl)
		},
		Metadata: map[string]interface{}{
			"aop": map[string]interface{}{},
			"autowire": map[string]interface{}{
				"allimpls": map[string]interface{}{
					"interfaces": []interface{}{
						new(log.TraceExtensionWriter),
					},
				},
			},
		},
		DisableProxy: true,
	}
	allimpls.RegisterStructDescriptor(log15HandlerStructDescriptor)
}

type logWriterConstructFunc func(impl *logWriter) (*logWriter, error)
type log15HandlerConstructFunc func(impl *log15Handler) (*log15Handler, error)
type logWriter_ struct {
	Write_                func(p []byte) (n int, err error)
	SetTraceLoggerWriter_ func(traceLoggerWriter log.Writer)
	Name_                 func() string
}

func (l *logWriter_) Write(p []byte) (n int, err error) {
	return l.Write_(p)
}

func (l *logWriter_) SetTraceLoggerWriter(traceLoggerWriter log.Writer) {
	l.SetTraceLoggerWriter_(traceLoggerWriter)
}

func (l *logWriter_) Name() string {
	return l.Name_()
}

type log15Handler_ struct {
	Log_                  func(r *log15.Record) error
	SetTraceLoggerWriter_ func(traceLoggerWriter log.Writer)
	Name_                 func() string
}

func (l *log15Handler_) Log(r *log15.Record) error {
	return l.Log_(r)
}

func (l *log15Handler_) SetTraceLoggerWriter(traceLoggerWriter log.Writer) {
	l.SetTraceLoggerWriter_(traceLoggerWriter)
}

func (l *log15Handler_) Name() string {
	return l.Name_()
}

type logWriterIOCInterface interface {
	Write(p []byte) (n int, err error)
	SetTraceLoggerWriter(traceLoggerWriter log.Writer)
	Name() string
}

type log15HandlerIOCInterface interface {
	Log(r *log15.Record) error
	SetTraceLoggerWriter(traceLoggerWriter log.Writer)
	Name() string
}

var _logWriterSDID string
var _log15HandlerSDID string
