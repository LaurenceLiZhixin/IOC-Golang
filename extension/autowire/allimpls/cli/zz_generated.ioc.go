//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package cli

import (
	"sigs.k8s.io/controller-tools/pkg/loader"
	"sigs.k8s.io/controller-tools/pkg/markers"

	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	"github.com/alibaba/ioc-golang/extension/autowire/allimpls"
	"github.com/alibaba/ioc-golang/iocli/gen/generator/plugin"
	marker "github.com/alibaba/ioc-golang/iocli/gen/marker"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &allImplsCodeGenerationPlugin_{}
		},
	})
	allImplsCodeGenerationPluginStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &allImplsCodeGenerationPlugin{}
		},
		ConstructFunc: func(i interface{}, _ interface{}) (interface{}, error) {
			impl := i.(*allImplsCodeGenerationPlugin)
			var constructFunc allImplsCodeGenerationPluginConstructFunc = create
			return constructFunc(impl)
		},
		Metadata: map[string]interface{}{
			"aop": map[string]interface{}{},
			"autowire": map[string]interface{}{
				"allimpls": map[string]interface{}{
					"autowireType": "normal",
				},
				"common": map[string]interface{}{
					"implements": []interface{}{
						new(plugin.CodeGeneratorPluginForOneStruct),
					},
				},
			},
		},
	}
	allimpls.RegisterStructDescriptor(allImplsCodeGenerationPluginStructDescriptor)
	var _ plugin.CodeGeneratorPluginForOneStruct = &allImplsCodeGenerationPlugin{}
	iocGolangAutowireAllImplsTypeMarkerStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &iocGolangAutowireAllImplsTypeMarker{}
		},
		Metadata: map[string]interface{}{
			"aop": map[string]interface{}{},
			"autowire": map[string]interface{}{
				"common": map[string]interface{}{
					"implements": []interface{}{
						new(marker.DefinitionGetter),
					},
				},
			},
		},
		DisableProxy: true,
	}
	allimpls.RegisterStructDescriptor(iocGolangAutowireAllImplsTypeMarkerStructDescriptor)
	var _ marker.DefinitionGetter = &iocGolangAutowireAllImplsTypeMarker{}
}

type allImplsCodeGenerationPluginConstructFunc func(impl *allImplsCodeGenerationPlugin) (*allImplsCodeGenerationPlugin, error)
type allImplsCodeGenerationPlugin_ struct {
	Name_                           func() string
	Type_                           func() plugin.Type
	Init_                           func(info markers.TypeInfo)
	GenerateSDMetadataForOneStruct_ func(root *loader.Package, c plugin.CodeWriter)
	GenerateInFileForOneStruct_     func(root *loader.Package, c plugin.CodeWriter)
}

func (a *allImplsCodeGenerationPlugin_) Name() string {
	return a.Name_()
}

func (a *allImplsCodeGenerationPlugin_) Type() plugin.Type {
	return a.Type_()
}

func (a *allImplsCodeGenerationPlugin_) Init(info markers.TypeInfo) {
	a.Init_(info)
}

func (a *allImplsCodeGenerationPlugin_) GenerateSDMetadataForOneStruct(root *loader.Package, c plugin.CodeWriter) {
	a.GenerateSDMetadataForOneStruct_(root, c)
}

func (a *allImplsCodeGenerationPlugin_) GenerateInFileForOneStruct(root *loader.Package, c plugin.CodeWriter) {
	a.GenerateInFileForOneStruct_(root, c)
}

type allImplsCodeGenerationPluginIOCInterface interface {
	Name() string
	Type() plugin.Type
	Init(info markers.TypeInfo)
	GenerateSDMetadataForOneStruct(root *loader.Package, c plugin.CodeWriter)
	GenerateInFileForOneStruct(root *loader.Package, c plugin.CodeWriter)
}

var _allImplsCodeGenerationPluginSDID string
var _iocGolangAutowireAllImplsTypeMarkerSDID string
