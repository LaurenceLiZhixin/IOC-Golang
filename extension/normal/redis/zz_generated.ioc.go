//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli

package redis

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	util "github.com/alibaba/ioc-golang/autowire/util"
	go_redisredis "github.com/go-redis/redis"
	timex "time"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &impl_{}
		},
	})
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &Impl{}
		},
		ParamFactory: func() interface{} {
			var _ configInterface = &Config{}
			return &Config{}
		},
		ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
			param := p.(configInterface)
			impl := i.(*Impl)
			return param.New(impl)
		},
	})
}

type configInterface interface {
	New(impl *Impl) (*Impl, error)
}
type impl_ struct {
	GetRawClient_ func() *go_redisredis.Client
	HGetAll_      func(key string) (map[string]string, error)
	Get_          func(key string) (string, error)
	Set_          func(key string, value interface{}, expiration timex.Duration) (string, error)
}

func (i *impl_) GetRawClient() *go_redisredis.Client {
	return i.GetRawClient_()
}
func (i *impl_) HGetAll(key string) (map[string]string, error) {
	return i.HGetAll_(key)
}
func (i *impl_) Get(key string) (string, error) {
	return i.Get_(key)
}
func (i *impl_) Set(key string, value interface{}, expiration timex.Duration) (string, error) {
	return i.Set_(key, value, expiration)
}

type ImplIOCInterface interface {
	GetRawClient() *go_redisredis.Client
	HGetAll(key string) (map[string]string, error)
	Get(key string) (string, error)
	Set(key string, value interface{}, expiration timex.Duration) (string, error)
}

func GetImpl(p *Config) (*Impl, error) {
	i, err := normal.GetImpl(util.GetSDIDByStructPtr(new(Impl)), p)
	if err != nil {
		return nil, err
	}
	impl := i.(*Impl)
	return impl, nil
}
func GetImplIOCInterface(p *Config) (ImplIOCInterface, error) {
	i, err := normal.GetImplWithProxy(util.GetSDIDByStructPtr(new(Impl)), p)
	if err != nil {
		return nil, err
	}
	impl := i.(ImplIOCInterface)
	return impl, nil
}
