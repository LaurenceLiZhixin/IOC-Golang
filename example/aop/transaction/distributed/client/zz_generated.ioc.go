//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package main

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	var tradeServiceStructDescriptor = &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &TradeService{}
		},
		Metadata: map[string]interface{}{
			"aop": map[string]interface{}{
				"transaction": map[string]string{
					"DoTradeWithTxFinallyFailed":  "",
					"DoTradeWithTxAddMoneyFailed": "",
					"DoTradeWithTxSuccess":        "",
				},
			},
			"autowire": map[string]interface{}{},
		},
	}
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &tradeService_{}
		},
	})
	singleton.RegisterStructDescriptor(tradeServiceStructDescriptor)
	var appStructDescriptor = &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &App{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &app_{}
		},
	})
	singleton.RegisterStructDescriptor(appStructDescriptor)
}

type tradeService_ struct {
	DoTradeWithTxFinallyFailed_  func(id1, id2, num int) error
	DoTradeWithTxAddMoneyFailed_ func(id1, id2, num int) error
	DoTradeWithTxSuccess_        func(id1, id2, num int) error
}

func (t *tradeService_) DoTradeWithTxFinallyFailed(id1, id2, num int) error {
	return t.DoTradeWithTxFinallyFailed_(id1, id2, num)
}

func (t *tradeService_) DoTradeWithTxAddMoneyFailed(id1, id2, num int) error {
	return t.DoTradeWithTxAddMoneyFailed_(id1, id2, num)
}

func (t *tradeService_) DoTradeWithTxSuccess(id1, id2, num int) error {
	return t.DoTradeWithTxSuccess_(id1, id2, num)
}

type app_ struct {
	Run_ func()
}

func (a *app_) Run() {
	a.Run_()
}

type TradeServiceIOCInterface interface {
	DoTradeWithTxFinallyFailed(id1, id2, num int) error
	DoTradeWithTxAddMoneyFailed(id1, id2, num int) error
	DoTradeWithTxSuccess(id1, id2, num int) error
}

type AppIOCInterface interface {
	Run()
}

var _tradeServiceSDID string

func GetTradeServiceSingleton() (*TradeService, error) {
	if _tradeServiceSDID == "" {
		_tradeServiceSDID = util.GetSDIDByStructPtr(new(TradeService))
	}
	i, err := singleton.GetImpl(_tradeServiceSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*TradeService)
	return impl, nil
}

func GetTradeServiceIOCInterfaceSingleton() (TradeServiceIOCInterface, error) {
	if _tradeServiceSDID == "" {
		_tradeServiceSDID = util.GetSDIDByStructPtr(new(TradeService))
	}
	i, err := singleton.GetImplWithProxy(_tradeServiceSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(TradeServiceIOCInterface)
	return impl, nil
}

type ThisTradeService struct {
}

func (t *ThisTradeService) This() TradeServiceIOCInterface {
	thisPtr, _ := GetTradeServiceIOCInterfaceSingleton()
	return thisPtr
}

var _appSDID string

func GetAppSingleton() (*App, error) {
	if _appSDID == "" {
		_appSDID = util.GetSDIDByStructPtr(new(App))
	}
	i, err := singleton.GetImpl(_appSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*App)
	return impl, nil
}

func GetAppIOCInterfaceSingleton() (AppIOCInterface, error) {
	if _appSDID == "" {
		_appSDID = util.GetSDIDByStructPtr(new(App))
	}
	i, err := singleton.GetImplWithProxy(_appSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(AppIOCInterface)
	return impl, nil
}

type ThisApp struct {
}

func (t *ThisApp) This() AppIOCInterface {
	thisPtr, _ := GetAppIOCInterfaceSingleton()
	return thisPtr
}
